image: docker:18.09.7

services:
  - docker:18.09.7-dind

stages:
  - build
  - push
  - deploy

variables:
  # fill those if you have a proxy in your environment
  port: $PORT
  redis_port: $REDIS_PORT
  redis_host: $REDIS_HOST
  redis_password: $REDIS_PASSWORD
  secret: $SECRET

before_script:
  # docker login asks for the password to be passed through stdin for security
  # we use $CI_JOB_TOKEN here which is a special token provided by GitLab
  # - echo -n $CI_TOKEN | docker login -u joduplessis --password-stdin $CI_REGISTRY

Build:
  stage: build
  image: docker:18.09.7
  only:
    - master
  script:
    - echo -n $CI_TOKEN | docker login -u joduplessis --password-stdin $CI_REGISTRY
    # Pull the latest image
    - docker pull $CI_REGISTRY_IMAGE:latest || true
    # cache-from here tells a tagged image to be used as a cache source
    - >
      docker build
      --build-arg PORT=$port
      --build-arg REDIS_HOST=$redis_host
      --build-arg REDIS_PORT=$redis_port
      --build-arg REDIS_PASSWORD=$redis_password
      --build-arg SECRET=$secret
      --cache-from $CI_REGISTRY_IMAGE:latest
      --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
      .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA

# Here, the goal is to tag the "master" branch as "latest"
Push latest:
  variables:
    # We are just playing with Docker here.
    # We do not need GitLab to clone the source code.
    GIT_STRATEGY: none
  stage: push
  image: docker:18.09.7
  only:
    # Only "master" should be tagged "latest"
    - master
  script:
    - echo -n $CI_TOKEN | docker login -u joduplessis --password-stdin $CI_REGISTRY
    # Because we have no guarantee that this job will be picked up by the same runner
    # that built the image in the previous step, we pull it again locally
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    # Then we tag it "latest"
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE:latest
    # Annnd we push it.
    - docker push $CI_REGISTRY_IMAGE:latest

# Finally, the goal here is to Docker tag any Git tag
# GitLab will start a new pipeline everytime a Git tag is created, which is pretty awesome
Push tag:
  variables:
    # Again, we do not need the source code here. Just playing with Docker.
    GIT_STRATEGY: none
  stage: push
  only:
    # We want this job to be run on tags only.
    - tags
  script:
    - echo -n $CI_TOKEN | docker login -u joduplessis --password-stdin $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME

Deploy:
  image: ubuntu:latest
  stage: deploy
  script:
    - apt-get update
    - apt-get install software-properties-common -y
    - apt-add-repository --yes --update ppa:ansible/ansible
    - apt-get install ansible -y
    - DOCKER_IMAGE=$CI_REGISTRY_IMAGE:$CI_COMMIT_SHA ansible-playbook ./playbook/deploy.yml -i ./playbook/hosts
  only:
    - master
